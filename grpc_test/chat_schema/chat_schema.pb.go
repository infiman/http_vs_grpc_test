// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat_schema.proto

/*
Package chat_schema is a generated protocol buffer package.

It is generated from these files:
  chat_schema.proto

It has these top-level messages:
  RoomSearch
  RoomRequest
  Room
  AuthResponse
  Message
*/
package chat_schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
  context "golang.org/x/net/context"
  grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RoomSearch struct {
  SubString string `protobuf:"bytes,1,opt,name=sub_string,json=subString" json:"sub_string,omitempty"`
}

func (m *RoomSearch) Reset()                    { *m = RoomSearch{} }
func (m *RoomSearch) String() string            { return proto.CompactTextString(m) }
func (*RoomSearch) ProtoMessage()               {}
func (*RoomSearch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RoomSearch) GetSubString() string {
  if m != nil {
    return m.SubString
  }
  return ""
}

type RoomRequest struct {
  Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
  UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
}

func (m *RoomRequest) Reset()                    { *m = RoomRequest{} }
func (m *RoomRequest) String() string            { return proto.CompactTextString(m) }
func (*RoomRequest) ProtoMessage()               {}
func (*RoomRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RoomRequest) GetName() string {
  if m != nil {
    return m.Name
  }
  return ""
}

func (m *RoomRequest) GetUserName() string {
  if m != nil {
    return m.UserName
  }
  return ""
}

type Room struct {
  Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
  UsersCount int32  `protobuf:"varint,2,opt,name=users_count,json=usersCount" json:"users_count,omitempty"`
}

func (m *Room) Reset()                    { *m = Room{} }
func (m *Room) String() string            { return proto.CompactTextString(m) }
func (*Room) ProtoMessage()               {}
func (*Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Room) GetName() string {
  if m != nil {
    return m.Name
  }
  return ""
}

func (m *Room) GetUsersCount() int32 {
  if m != nil {
    return m.UsersCount
  }
  return 0
}

type AuthResponse struct {
  Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
  Status  int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (m *AuthResponse) Reset()                    { *m = AuthResponse{} }
func (m *AuthResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()               {}
func (*AuthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AuthResponse) GetMessage() string {
  if m != nil {
    return m.Message
  }
  return ""
}

func (m *AuthResponse) GetStatus() int32 {
  if m != nil {
    return m.Status
  }
  return 0
}

type Message struct {
  RoomName  string `protobuf:"bytes,1,opt,name=room_name,json=roomName" json:"room_name,omitempty"`
  UserName  string `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
  Message   string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
  Timestamp string `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Message) GetRoomName() string {
  if m != nil {
    return m.RoomName
  }
  return ""
}

func (m *Message) GetUserName() string {
  if m != nil {
    return m.UserName
  }
  return ""
}

func (m *Message) GetMessage() string {
  if m != nil {
    return m.Message
  }
  return ""
}

func (m *Message) GetTimestamp() string {
  if m != nil {
    return m.Timestamp
  }
  return ""
}

func init() {
  proto.RegisterType((*RoomSearch)(nil), "chat_schema.RoomSearch")
  proto.RegisterType((*RoomRequest)(nil), "chat_schema.RoomRequest")
  proto.RegisterType((*Room)(nil), "chat_schema.Room")
  proto.RegisterType((*AuthResponse)(nil), "chat_schema.AuthResponse")
  proto.RegisterType((*Message)(nil), "chat_schema.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chat service

type ChatClient interface {
  GetRooms(ctx context.Context, in *RoomSearch, opts ...grpc.CallOption) (Chat_GetRoomsClient, error)
  Login(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*AuthResponse, error)
  Chat(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatClient, error)
  Logout(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type chatClient struct {
  cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
  return &chatClient{cc}
}

func (c *chatClient) GetRooms(ctx context.Context, in *RoomSearch, opts ...grpc.CallOption) (Chat_GetRoomsClient, error) {
  stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[0], c.cc, "/chat_schema.Chat/GetRooms", opts...)
  if err != nil {
    return nil, err
  }
  x := &chatGetRoomsClient{stream}
  if err := x.ClientStream.SendMsg(in); err != nil {
    return nil, err
  }
  if err := x.ClientStream.CloseSend(); err != nil {
    return nil, err
  }
  return x, nil
}

type Chat_GetRoomsClient interface {
  Recv() (*Room, error)
  grpc.ClientStream
}

type chatGetRoomsClient struct {
  grpc.ClientStream
}

func (x *chatGetRoomsClient) Recv() (*Room, error) {
  m := new(Room)
  if err := x.ClientStream.RecvMsg(m); err != nil {
    return nil, err
  }
  return m, nil
}

func (c *chatClient) Login(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
  out := new(AuthResponse)
  err := grpc.Invoke(ctx, "/chat_schema.Chat/Login", in, out, c.cc, opts...)
  if err != nil {
    return nil, err
  }
  return out, nil
}

func (c *chatClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatClient, error) {
  stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[1], c.cc, "/chat_schema.Chat/Chat", opts...)
  if err != nil {
    return nil, err
  }
  x := &chatChatClient{stream}
  return x, nil
}

type Chat_ChatClient interface {
  Send(*Message) error
  Recv() (*Message, error)
  grpc.ClientStream
}

type chatChatClient struct {
  grpc.ClientStream
}

func (x *chatChatClient) Send(m *Message) error {
  return x.ClientStream.SendMsg(m)
}

func (x *chatChatClient) Recv() (*Message, error) {
  m := new(Message)
  if err := x.ClientStream.RecvMsg(m); err != nil {
    return nil, err
  }
  return m, nil
}

func (c *chatClient) Logout(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
  out := new(AuthResponse)
  err := grpc.Invoke(ctx, "/chat_schema.Chat/Logout", in, out, c.cc, opts...)
  if err != nil {
    return nil, err
  }
  return out, nil
}

// Server API for Chat service

type ChatServer interface {
  GetRooms(*RoomSearch, Chat_GetRoomsServer) error
  Login(context.Context, *RoomRequest) (*AuthResponse, error)
  Chat(Chat_ChatServer) error
  Logout(context.Context, *RoomRequest) (*AuthResponse, error)
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
  s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_GetRooms_Handler(srv interface{}, stream grpc.ServerStream) error {
  m := new(RoomSearch)
  if err := stream.RecvMsg(m); err != nil {
    return err
  }
  return srv.(ChatServer).GetRooms(m, &chatGetRoomsServer{stream})
}

type Chat_GetRoomsServer interface {
  Send(*Room) error
  grpc.ServerStream
}

type chatGetRoomsServer struct {
  grpc.ServerStream
}

func (x *chatGetRoomsServer) Send(m *Room) error {
  return x.ServerStream.SendMsg(m)
}

func _Chat_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(RoomRequest)
  if err := dec(in); err != nil {
    return nil, err
  }
  if interceptor == nil {
    return srv.(ChatServer).Login(ctx, in)
  }
  info := &grpc.UnaryServerInfo{
    Server:     srv,
    FullMethod: "/chat_schema.Chat/Login",
  }
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(ChatServer).Login(ctx, req.(*RoomRequest))
  }
  return interceptor(ctx, in, info, handler)
}

func _Chat_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
  return srv.(ChatServer).Chat(&chatChatServer{stream})
}

type Chat_ChatServer interface {
  Send(*Message) error
  Recv() (*Message, error)
}

type chatChatServer struct {
  grpc.ServerStream
}

func (x *chatChatServer) Send(m *Message) error {
  return x.ServerStream.SendMsg(m)
}

func (x *chatChatServer) Recv() (*Message, error) {
  m := new(Message)
  if err := x.ServerStream.RecvMsg(m); err != nil {
    return nil, err
  }
  return m, nil
}

func _Chat_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(RoomRequest)
  if err := dec(in); err != nil {
    return nil, err
  }
  if interceptor == nil {
    return srv.(ChatServer).Logout(ctx, in)
  }
  info := &grpc.UnaryServerInfo{
    Server:     srv,
    FullMethod: "/chat_schema.Chat/Logout",
  }
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(ChatServer).Logout(ctx, req.(*RoomRequest))
  }
  return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
  ServiceName: "chat_schema.Chat",
  HandlerType: (*ChatServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "Login",
      Handler:    _Chat_Login_Handler,
    },
    {
      MethodName: "Logout",
      Handler:    _Chat_Logout_Handler,
    },
  },
  Streams: []grpc.StreamDesc{
    {
      StreamName:    "GetRooms",
      Handler:       _Chat_GetRooms_Handler,
      ServerStreams: true,
    },
    {
      StreamName:    "Chat",
      Handler:       _Chat_Chat_Handler,
      ServerStreams: true,
      ClientStreams: true,
    },
  },
  Metadata: "chat_schema.proto",
}

func init() { proto.RegisterFile("chat_schema.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
  // 330 bytes of a gzipped FileDescriptorProto
  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x4b, 0xc3, 0x40,
  0x10, 0xc5, 0x1b, 0x9b, 0xfe, 0xc9, 0xd4, 0x4b, 0x07, 0xd1, 0xd8, 0x2a, 0xca, 0x9e, 0x0a, 0x42,
  0x29, 0x7a, 0x11, 0x85, 0xaa, 0xf4, 0xe0, 0xa5, 0xf6, 0x90, 0x7e, 0x80, 0xb0, 0x0d, 0x4b, 0xd2,
  0xc3, 0x66, 0x6b, 0x66, 0xf6, 0xe4, 0x67, 0x17, 0x24, 0x6b, 0xaa, 0x29, 0x2d, 0x08, 0xde, 0xb2,
  0xbf, 0xf7, 0x26, 0x6f, 0xf3, 0x26, 0xd0, 0x4f, 0x32, 0xc9, 0x31, 0x25, 0x99, 0xd2, 0x72, 0xbc,
  0x29, 0x0c, 0x1b, 0xec, 0xd5, 0x90, 0xb8, 0x01, 0x88, 0x8c, 0xd1, 0x4b, 0x25, 0x8b, 0x24, 0xc3,
  0x4b, 0x00, 0xb2, 0xab, 0x98, 0xb8, 0x58, 0xe7, 0x69, 0xe8, 0x5d, 0x7b, 0xa3, 0x20, 0x0a, 0xc8,
  0xae, 0x96, 0x0e, 0x88, 0x29, 0xf4, 0x4a, 0x73, 0xa4, 0xde, 0xad, 0x22, 0x46, 0x04, 0x3f, 0x97,
  0x5a, 0x55, 0x3e, 0xf7, 0x8c, 0x43, 0x08, 0x2c, 0xa9, 0x22, 0x76, 0xc2, 0x91, 0x13, 0xba, 0x25,
  0x58, 0x48, 0xad, 0xc4, 0x23, 0xf8, 0xe5, 0xfc, 0xc1, 0xc1, 0x2b, 0xe8, 0x95, 0x3e, 0x8a, 0x13,
  0x63, 0x73, 0x76, 0xa3, 0xad, 0x08, 0x1c, 0x9a, 0x95, 0x44, 0x3c, 0xc3, 0xf1, 0x8b, 0xe5, 0x2c,
  0x52, 0xb4, 0x31, 0x39, 0x29, 0x0c, 0xa1, 0xa3, 0x15, 0x91, 0x4c, 0xb7, 0x39, 0xdb, 0x23, 0x9e,
  0x42, 0x9b, 0x58, 0xb2, 0xa5, 0xb0, 0xe9, 0xde, 0x52, 0x9d, 0xc4, 0x07, 0x74, 0xde, 0x2a, 0xcb,
  0x10, 0x82, 0xc2, 0x18, 0x1d, 0xd7, 0xae, 0xd1, 0x2d, 0xc1, 0xe2, 0xaf, 0x6f, 0xa8, 0xc7, 0x36,
  0x77, 0x63, 0x2f, 0x20, 0xe0, 0xb5, 0x56, 0xc4, 0x52, 0x6f, 0x42, 0xff, 0xbb, 0xbb, 0x1f, 0x70,
  0xfb, 0xe9, 0x81, 0x3f, 0xcb, 0x24, 0xe3, 0x03, 0x74, 0x5f, 0x15, 0x97, 0x3d, 0x10, 0x9e, 0x8d,
  0xeb, 0xeb, 0xf9, 0x5d, 0xc4, 0xa0, 0xbf, 0x27, 0x88, 0xc6, 0xc4, 0xc3, 0x29, 0xb4, 0xe6, 0x26,
  0x5d, 0xe7, 0x18, 0xee, 0xe9, 0xd5, 0x52, 0x06, 0xe7, 0x3b, 0x4a, 0xbd, 0x31, 0xd1, 0xc0, 0xfb,
  0xea, 0x0e, 0x27, 0x3b, 0xa6, 0xaa, 0x94, 0xc1, 0x41, 0x2a, 0x1a, 0x23, 0x6f, 0xe2, 0xe1, 0x13,
  0xb4, 0xe7, 0x26, 0x35, 0x96, 0xff, 0x19, 0xbd, 0x6a, 0xbb, 0x9f, 0xef, 0xee, 0x2b, 0x00, 0x00,
  0xff, 0xff, 0x5b, 0xb1, 0xe9, 0xbf, 0x91, 0x02, 0x00, 0x00,
}
